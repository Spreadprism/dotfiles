#!/usr/bin/python

import os
import hashlib
from pathlib import Path
from subprocess import CompletedProcess
from time import sleep
from typing import Tuple
from datetime import datetime

logs_dir = Path.home() / ".config" / "hypr" / "logs"
if not logs_dir.exists():
    logs_dir.mkdir(parents=True)

lock_dir = Path.home() / ".cache" / "relaunch"
if not lock_dir.exists():
    lock_dir.mkdir(parents=True)


def cmd_with_args() -> Tuple[str, ...]:
    if len(os.sys.argv) < 2:
        print("Usage: relaunch <cmd> [args...]")
        os.sys.exit(1)
    cmd = os.sys.argv[1]
    args = os.sys.argv[2:]

    return (cmd, *args)


def print_error(cmd: str, process: CompletedProcess):
    print("Error: " + process.stderr)
    # time format should be hours:min:sec-day-month-year
    log_file_name = (
        logs_dir / f"{cmd}-{datetime.now().strftime('%H:%M:%S-%d-%m-%Y')}.log"
    )
    with open(log_file_name, "w") as log_file:
        log_file.write(process.stderr)


def generate_hash(cmd, *args) -> str:
    input = f"{cmd}{''.join(args)}"
    return hashlib.md5(input.encode()).hexdigest()


def acquire_lock(cmd, *args) -> bool:
    hash_key = generate_hash(cmd, *args)
    lock_file = lock_dir / f"{hash_key}.lock"
    if lock_file.exists():
        return False
    else:
        lock_file.touch()
        return True


def release_lock(cmd, *args):
    hash_key = generate_hash(cmd, *args)
    lock_file = lock_dir / f"{hash_key}.lock"
    lock_file.unlink()


if __name__ == "__main__":
    cmd, *args = cmd_with_args()
    # if not acquire_lock(cmd, *args):
    #     print(f"Another instance of {cmd} is already running")
    #     os.sys.exit(0)

    try:
        i = 0

        while True:
            import subprocess

            if i >= 3:
                print(f"Unable to restart {cmd}")
                break

            start = datetime.now()
            process = subprocess.run([cmd, *args], capture_output=True, text=True)
            if process.returncode != 0:
                print_error(cmd, process)

            if (datetime.now() - start).seconds < 5:
                i += 1
            else:
                i = 0

            sleep(1)

    except KeyboardInterrupt:
        print("Exiting...")
    # finally:
    #     release_lock(cmd, *args)

    os.sys.exit(0)
