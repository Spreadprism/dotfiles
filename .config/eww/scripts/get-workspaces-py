#!/usr/bin/env python


import os
import json


def get_workspaces(monitor_id: int | None = None, active: bool = False) -> list:
    workspaces_json = os.popen("hyprctl workspaces -j").read()
    try:
        workspaces: list = json.loads(workspaces_json)

        filtered_workspaces = []
        for workspace in workspaces:
            if active and not workspace["active"]:
                continue
            if monitor_id is not None and int(workspace["monitorID"]) != monitor_id:
                continue
            if int(workspace["id"]) < 0:
                continue
            filtered_workspaces.append(workspace)

        if monitor_id is not None:
            workspaces = [
                workspace
                for workspace in workspaces
                if workspace["monitorID"] == monitor_id
            ]
        if active:
            workspaces = [workspace for workspace in workspaces if workspace["active"]]

        return filtered_workspaces

    except Exception:
        print("Failed to parse hyprland workspaces json")
        exit(1)


def get_workspaces_ids(
    monitor_id: int | None = None, active: bool = False
) -> list[int]:
    workspaces = get_workspaces(monitor_id, active)
    return [int(workspace["id"]) for workspace in workspaces]


def get_monitor_id(desc: str) -> int:
    pass


if __name__ == "__main__":
    import argparse

    parser = argparse.ArgumentParser(description="Hyprland workspace")
    parser.add_argument("--active", action="store_true", help="Get active workspaces")
    parser.add_argument(
        "--monitor", type=int, help="Get workspaces for specific monitor id"
    )
    parser.add_argument(
        "--monitor-desc",
        nargs="+",
        help="Get workspaces for specific monitor description",
    )
    parser.add_argument("--separator", default=" ", help="Separator for output")

    args = parser.parse_args()

    monitor_id = args.monitor

    if args.monitor is not None and args.monitor_desc is not None:
        print("Cannot use both monitor and monitor-desc")
        exit(1)
    elif monitor_id is None and args.monitor_desc is not None:
        monitor_desc = " ".join(args.monitor_desc)
        monitor_id = get_monitor_id(monitor_desc)

    workspaces = set(get_workspaces_ids(monitor_id, args.active))
    if args.active:
        print(workspaces[0])
    else:
        print(args.separator.join(map(str, workspaces)))

    import socket

    clientsocket = socket.socket(socket.AF_UNIX)
    unix_socket_path = (
        f"/tmp/hypr/{os.getenv('HYPRLAND_INSTANCE_SIGNATURE')}/.socket2.sock"
    )
    clientsocket.connect(unix_socket_path)

    while True:
        data = clientsocket.recv(4096)

        if not data:
            continue

        decoded_datas = data.decode().rstrip("\n")

        if decoded_datas == "":
            continue

        entries = decoded_datas.split("\n")
        for entry in entries:
            key, value = entry.split(">>", 1)

            match key:
                case "workspaces":
                    if args.active:
                        print(value)
                case "createworkspace":
                    if not args.active:
                        workspaces.add(int(value))
                        print(args.separator.join(map(str, workspaces)))
                case "destroyworkspace":
                    if not args.active:
                        workspaces.remove(int(value))
                        print(args.separator.join(map(str, workspaces)))
                case _:
                    pass
